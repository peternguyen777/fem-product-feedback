// import data from "../../public/data.json"; //import json data
import React, { useEffect, useState } from "react";
import Head from "next/head";
import Header from "../../components/roadmap/Header";
import ProgressBar from "../../components/roadmap/ProgressBar";
import { capitalizeFirstLetter } from "../../components/utils/capitalize";
import CardRoadmap from "../../components/UI/CardRoadmap";
import LoadingSpinner from "../../components/UI/LoadingSpinner";
import { useQuery } from "@apollo/client";
import { GET_ALL_FEEDBACK } from "../../graphql/queries";
import { useSwipeable } from "react-swipeable";

function Roadmap() {
  const [filterRoadmap, setFilterRoadmap] = useState("In-Progress");
  const [reqPlanned, setReqPlanned] = useState([]);
  const [reqProgress, setReqProgress] = useState([]);
  const [reqLive, setReqLive] = useState([]);

  const { data, error, loading } = useQuery(GET_ALL_FEEDBACK);

  useEffect(() => {
    const requests = data?.getFeedbackList;
    const planned = requests?.filter((item) => item.status === "planned");
    const progress = requests?.filter((item) => item.status === "in-progress");
    const live = requests?.filter((item) => item.status === "live");
    setReqPlanned(planned);
    setReqProgress(progress);
    setReqLive(live);
  }, [data]);

  const handlers = useSwipeable({
    onSwipedRight: () => {
      if (filterRoadmap === "In-Progress") {
        setFilterRoadmap("Planned");
      }
      if (filterRoadmap === "Live") {
        setFilterRoadmap("In-Progress");
      }
    },
    onSwipedLeft: () => {
      if (filterRoadmap === "Planned") {
        setFilterRoadmap("In-Progress");
      }
      if (filterRoadmap === "In-Progress") {
        setFilterRoadmap("Live");
      }
    },
    preventDefaultTouchmoveEvent: true,
    trackMouse: true,
  });

  return (
    <div className='flex flex-col lg:mx-auto lg:max-w-[1190px]'>
      <Head>
        <title>Product Feedback - Roadmap</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/assets/favicon-32x32.png' />
      </Head>
      <Header />
      {loading ? (
        <div className='mt-[56px] flex justify-center md:mt-[70px]  lg:mt-[105px]'>
          <LoadingSpinner />
        </div>
      ) : (
        <>
          <ProgressBar
            filterRoadmap={filterRoadmap}
            setFilterRoadmap={setFilterRoadmap}
            reqPlanned={reqPlanned}
            reqProgress={reqProgress}
            reqLive={reqLive}
          />

          <section className='mx-6 md:hidden' {...handlers}>
            <div className='my-6'>
              <h3 className='mb-1 text-lightnavy'>
                {capitalizeFirstLetter(filterRoadmap)} (
                {filterRoadmap === "In-Progress" && reqProgress?.length}
                {filterRoadmap === "Planned" && reqPlanned?.length}
                {filterRoadmap === "Live" && reqLive?.length})
              </h3>
              <p className='body3 font-normal text-gray'>
                {filterRoadmap === "In-Progress" && `Currently being developed`}
                {filterRoadmap === "Planned" && `Ideas prioritzed for research`}
                {filterRoadmap === "Live" && `Released features`}
              </p>
            </div>
            <ul className='mb-[98px] space-y-4'>
              {filterRoadmap === "Planned" &&
                reqPlanned?.map((item, i) => (
                  <CardRoadmap
                    key={i}
                    itemData={item}
                    filterRoadmap={filterRoadmap}
                  />
                ))}
              {filterRoadmap === "In-Progress" &&
                reqProgress?.map((item, i) => (
                  <CardRoadmap
                    key={i}
                    itemData={item}
                    filterRoadmap={filterRoadmap}
                  />
                ))}
              {filterRoadmap === "Live" &&
                reqLive?.map((item, i) => (
                  <CardRoadmap
                    key={i}
                    itemData={item}
                    filterRoadmap={filterRoadmap}
                  />
                ))}
            </ul>
          </section>

          <section className='mx-10 mt-8 mb-[95px] hidden grid-cols-3 gap-x-[10px] md:grid lg:mt-12 lg:mb-[180px] lg:gap-x-[30px]'>
            <div>
              <h4 className='mb-1 text-lightnavy lg:hidden'>
                Planned ({reqPlanned?.length})
              </h4>
              <h3 className='mb-1 hidden text-lightnavy lg:block'>
                Planned ({reqPlanned?.length})
              </h3>
              <h4 className='font-normal text-gray lg:hidden'>
                Ideas prioritized for research
              </h4>
              <p className='body1 hidden text-gray lg:block'>
                Ideas prioritized for research
              </p>
              <ul className='mt-6 space-y-4 lg:mt-8 lg:space-y-6'>
                {reqPlanned?.map((item, i) => (
                  <CardRoadmap
                    key={i}
                    itemData={item}
                    filterRoadmap='Planned'
                  />
                ))}
              </ul>
            </div>
            <div>
              <h4 className='mb-1 text-lightnavy lg:hidden'>
                In-Progress ({reqProgress?.length})
              </h4>
              <h3 className='mb-1 hidden text-lightnavy lg:block'>
                In-Progress ({reqProgress?.length})
              </h3>
              <h4 className='font-normal text-gray lg:hidden'>
                Currently being developed
              </h4>
              <p className='body1 hidden text-gray lg:block'>
                Currently being developed
              </p>
              <ul className='mt-6 space-y-4 lg:mt-8 lg:space-y-6'>
                {reqProgress?.map((item, i) => (
                  <CardRoadmap
                    key={i}
                    itemData={item}
                    filterRoadmap='In-Progress'
                  />
                ))}
              </ul>
            </div>
            <div>
              <h4 className='mb-1 text-lightnavy lg:hidden'>
                Live ({reqLive?.length})
              </h4>
              <h3 className='mb-1 hidden text-lightnavy lg:block'>
                Live ({reqLive?.length})
              </h3>
              <h4 className='font-normal text-gray lg:hidden'>
                Released features
              </h4>
              <p className='body1 hidden text-gray lg:block'>
                Released features
              </p>
              <ul className='mt-6 space-y-4 lg:mt-8 lg:space-y-6'>
                {reqLive?.map((item, i) => (
                  <CardRoadmap key={i} itemData={item} filterRoadmap='Live' />
                ))}
              </ul>
            </div>
          </section>
        </>
      )}
    </div>
  );
}

export default Roadmap;
